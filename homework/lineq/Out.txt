Part A:
Generate a random matrix A (8x3)
A=
      87.4       23.7       8.45 
      83.3       9.11       92.4 
      59.4         91       68.9 
      50.6       94.8       46.6 
      39.1       13.4       57.8 
      21.8       64.4       42.2 
      91.3       71.9       26.4 
      45.7         58       79.4 

Factorize it into QR by decomposing with call to QRGS.dec(A)
Q = 
      0.48     -0.351     -0.454 
     0.458     -0.452      0.511 
     0.327      0.416      0.114 
     0.278      0.505    -0.0896 
     0.215     -0.132      0.364 
      0.12      0.423      0.118 
     0.502     0.0452     -0.445 
     0.251      0.215      0.409 
R = 
       182        133        132 
         0        114       35.9 
         0          0       93.8 

Then Q^TQ=1 and QR=A is checked

Q^TQ= 
         1    1.8e-16   2.08e-16 
   1.8e-16          1          0 
  2.08e-16          0          1 

QR=A ?=> True

#####################

Generate a square matrix A (5x5)
A = 
       2.8       23.7       85.2       12.3        2.2 
      63.4       73.8       36.4       10.8       11.6 
      94.4       67.2         75       63.5       84.1 
      71.1       90.3       58.8       81.1       87.7 
       101       21.5       29.4       93.3       12.1 
Generate a random vector b with 5 rows
b =       9.94        6.4       13.1       3.41       2.09 

solve Ax=b with QRx=b
x =      0.122    -0.0822      0.155     -0.147     0.0564 

Ax=b ?=> True

Part b:
Using square matrix A from above and the factorized QR aswell
Calculates inverse of A refered to as B
B = 
  -0.00613    0.00618     0.0144    -0.0149    0.00326 
  -1.1e-06     0.0118    -0.0151     0.0133   -0.00265 
    0.0116   -0.00216    0.00563   -0.00534  -0.000458 
   0.00382    -0.0076    -0.0157     0.0148    0.00898 
   -0.0063   -0.00868     0.0147  -0.000322   -0.00791 
A*B = I ? => True

 The determinant of A is given to det(A)=2220269853.26145

Part C
Part C is also calculated for operations count, this is performed inside the Makefile and the result are plotted on TimeQRGS.svg. A fit to data is performed with N^3
