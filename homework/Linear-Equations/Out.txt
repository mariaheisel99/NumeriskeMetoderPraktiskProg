Part A:
Generate a random matrix A (8x3)
A=
       7.8       5.04        6.5 
      2.73       7.66       2.73 
       2.8       7.69       6.37 
      8.85       10.3       1.12 
      5.28        9.9       6.95 
      10.1       7.78       4.18 
      9.49        4.3       8.81 
      7.51       9.02       4.54 

Factorize it into QR by decomposing with call to QRGS.dec(A)
Q = 
     0.376     -0.228      0.235 
     0.132      0.474    -0.0154 
     0.135       0.47      0.431 
     0.426      0.176     -0.627 
     0.254      0.455      0.306 
     0.488      -0.18     -0.254 
     0.457      -0.45      0.445 
     0.361      0.173    -0.0948 
R = 
      20.8       19.9       13.6 
         0       10.6       2.24 
         0          0       8.09 

Then Q^TQ=1 and QR=A is checked

Q^TQ= 
         1      5e-16   2.43e-16 
     5e-16          1  -1.73e-17 
  2.43e-16  -1.73e-17          1 

QR=A ?=> True

#####################

Generate a square matrix A (5x5)
A = 
      2.96       10.5       7.02       10.7       4.58 
      5.22       4.79       1.77       7.07       7.57 
      8.66       4.08       2.93       6.76       1.59 
      3.02       10.9       2.71       6.29       9.21 
      9.99       4.72       1.02       9.05       5.16 
Generate a random vector b with 5 rows
b =        4.1       14.2       14.9         16       1.72 

solve Ax=b with QRx=b
x =       4.06       -1.8       9.28      -7.02        4.6 

Ax=b ?=> True

Part b:
Using square matrix A from above and the factorized QR aswell
Calculates inverse of A refered to as B
B = 
     -0.11     0.0231      0.238     0.0514     -0.101 
   0.00496       -0.3    -0.0395      0.175      0.137 
   -0.0202      0.368      0.415    -0.0701     -0.525 
     0.165    -0.0763      -0.33     -0.142       0.32 
   -0.0765      0.291     0.0718    0.00259     -0.193 
A*B = I ? => True
